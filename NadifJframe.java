/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package DataMahasiswaUAS;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import javax.persistence.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;

/**
 *
 * @author LENOVO
 */
public class NadifJframe extends javax.swing.JFrame {

    Connection conn;
    Statement stmt;
    PreparedStatement pstmt;

    String driver = "org.postgresql.Driver";
    String koneksi = "jdbc:postgresql://localhost:5432/DataMahasiswaUAS";
    String user = "postgres";
    String password = "12345678";
    private Object txtId;
    private javax.swing.JButton btnRefresh;

    public NadifJframe() {
        initComponents();
        showTable();
    }

    public void refreshData() {
        try {
            Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/DataMahasiswaUAS", "postgres", "12345678");
            // Logika untuk refresh data...
        } catch (SQLException e) {
            e.printStackTrace(); // Tangani pengecualian jika koneksi gagal
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        tfNIM = new javax.swing.JTextField();
        tfNama = new javax.swing.JTextField();
        tfAlamat = new javax.swing.JTextField();
        tfAsal = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnUpdate = new java.awt.Button();
        btnTambah = new java.awt.Button();
        btnDelete = new java.awt.Button();
        btnCetak = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        tfNamaOrtu = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Data Mahasiswa");

        jLabel2.setText("NIM");

        jLabel3.setText("Nama");

        jLabel4.setText("Alamat ");

        jLabel5.setText("Asal SMA");

        tfNIM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfNIMActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "NIM", "Nama", "Alamat", "Asal SMA", "Nama Orang Tua"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        btnUpdate.setActionCommand("Update");
        btnUpdate.setLabel("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnTambah.setLabel("Tambah");
        btnTambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahActionPerformed(evt);
            }
        });

        btnDelete.setLabel("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnCetak.setText("Cetak");
        btnCetak.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCetakActionPerformed(evt);
            }
        });

        jButton1.setText("Upload");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        jLabel6.setText("Nama Orang Tua");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(193, 193, 193)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(49, 49, 49)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tfNIM, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                                    .addComponent(tfNama, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                                    .addComponent(tfAlamat, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                                    .addComponent(tfAsal, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                                    .addComponent(tfNamaOrtu)))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(21, 21, 21)
                                        .addComponent(btnTambah, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnCetak, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnClear)))))
                        .addGap(0, 55, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfNIM))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tfNama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfAlamat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(tfAsal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(tfNamaOrtu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnTambah, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnCetak)
                        .addComponent(jButton1)
                        .addComponent(btnClear)))
                .addGap(25, 25, 25)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tfNIMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfNIMActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfNIMActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if (tfNIM.getText().equals("") || tfNama.getText().equals("") || tfAlamat.getText().equals("") || tfAsal.getText().equals("") || tfNamaOrtu.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Isi semua data!");
        } else {
            String nim = tfNIM.getText();
            String nama = tfNama.getText();
            String alamat = tfAlamat.getText();
            String asalSMA = tfAsal.getText();
            String namaOrangTua = tfNamaOrtu.getText();

            // Membuat koneksi dengan EntityManager
            EntityManagerFactory emf = Persistence.createEntityManagerFactory("MataKuliah3PU");
            EntityManager em = emf.createEntityManager();

            try {
                // Mulai transaksi
                em.getTransaction().begin();

                // Mencari data mahasiswa berdasarkan NIM
                Mahasiswa mahasiswa = em.find(Mahasiswa.class, nim);
                if (mahasiswa == null) {
                    // Jika data tidak ditemukan
                    JOptionPane.showMessageDialog(null, "Data mahasiswa dengan NIM " + nim + " tidak ditemukan!");
                } else {
                    // Update data mahasiswa
                    mahasiswa.setNama(nama);
                    mahasiswa.setAlamat(alamat);
                    mahasiswa.setAsalSma(asalSMA);
                    mahasiswa.setNamaOrtu(namaOrangTua);

                    // Commit transaksi untuk menyimpan perubahan
                    em.getTransaction().commit();

                    // Beri pesan sukses
                    JOptionPane.showMessageDialog(null, "Data mahasiswa berhasil diupdate!");

                    // Reset form dan tombol
                    bersih();
                    tfNIM.setEditable(true);  // Reset NIM agar bisa diubah
                }
            } catch (Exception e) {
                // Jika terjadi error, rollback transaksi
                if (em.getTransaction().isActive()) {
                    em.getTransaction().rollback();
                }
                JOptionPane.showMessageDialog(null, "Terjadi kesalahan: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            } finally {
                // Menutup EntityManager dan EntityManagerFactory setelah selesai
                em.close();
                emf.close();
            }

            // Update tabel setelah perubahan
            showTable();
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnTambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahActionPerformed
        try {
            // Pastikan field NIM bisa diedit dan cek apakah semua field terisi
            tfNIM.setEditable(true); // Memastikan field NIM bisa diedit
            if (tfNIM == null || tfNama == null || tfAlamat == null || tfAsal == null || tfNamaOrtu == null
                    || tfNIM.getText().isEmpty() || tfNama.getText().isEmpty() || tfAlamat.getText().isEmpty()
                    || tfAsal.getText().isEmpty() || tfNamaOrtu.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Isi semua data!", "Input Error", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Membuat EntityManager untuk JPA
            EntityManager entityManager = Persistence.createEntityManagerFactory("MataKuliah3PU").createEntityManager();
            entityManager.getTransaction().begin();

            // Membuat objek Mahasiswa dan mengisi datanya
            Mahasiswa mahasiswa = new Mahasiswa();
            mahasiswa.setNIM(tfNIM.getText());
            mahasiswa.setNama(tfNama.getText());
            mahasiswa.setAlamat(tfAlamat.getText());
            mahasiswa.setAsalSma(tfAsal.getText());
            mahasiswa.setNamaOrtu(tfNamaOrtu.getText());

            // Simpan ke database
            entityManager.persist(mahasiswa);
            entityManager.getTransaction().commit();

            // Panggil showTable() untuk memperbarui tampilan data di tabel
            showTable();

            // Beri pesan berhasil
            JOptionPane.showMessageDialog(null, "Data Mahasiswa berhasil ditambahkan", "Sukses", JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception e) {
            e.printStackTrace();
            // Tampilkan pesan error jika terjadi exception
            JOptionPane.showMessageDialog(null, "Terjadi kesalahan: " + e.getClass().getSimpleName() + " - " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnTambahActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        String nim = tfNIM.getText();

        if (nim.isEmpty()) {
            JOptionPane.showMessageDialog(null, "NIM tidak boleh kosong!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        EntityManagerFactory emf = Persistence.createEntityManagerFactory("MataKuliah3PU");
        EntityManager em = emf.createEntityManager();
        EntityTransaction transaction = em.getTransaction();

        try {
            int jawab = JOptionPane.showConfirmDialog(null, "Apakah Anda yakin ingin menghapus Mahasiswa dengan NIM: " + nim + "?", "Konfirmasi Penghapusan", JOptionPane.YES_NO_OPTION);

            if (jawab == JOptionPane.YES_OPTION) {
                transaction.begin();

                Mahasiswa mahasiswa = em.find(Mahasiswa.class, nim);

                if (mahasiswa != null) {
                    em.remove(mahasiswa);
                    transaction.commit();
                    JOptionPane.showMessageDialog(null, "Data berhasil dihapus");
                } else {
                    JOptionPane.showMessageDialog(null, "Data tidak ditemukan untuk NIM: " + nim);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Penghapusan dibatalkan");
            }

        } catch (Exception ex) {
            if (transaction.isActive()) {
                transaction.rollback();
            }
            JOptionPane.showMessageDialog(null, "Terjadi kesalahan: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            em.close();
        }

// Memperbarui tampilan tabel setelah penghapusan
        showTable();

    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnCetakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCetakActionPerformed
       try {
        String reportPath = "src/MataKuliah3/DataMahasiswa.jasper"; // Adjust the path as necessary
        HashMap<String, Object> parameters = new HashMap<>();
        Connection conn = DriverManager.getConnection(koneksi, user, password);
        JasperPrint jasperPrint = JasperFillManager.fillReport(reportPath, parameters, conn);
        
        // Show the print preview dialog
        JasperViewer.viewReport(jasperPrint, false);

        conn.close();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Failed to generate report: " + e.getMessage());
        e.printStackTrace();
    }
    }//GEN-LAST:event_btnCetakActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
int returnValue = jfc.showOpenDialog(null);
EntityManagerFactory emf = Persistence.createEntityManagerFactory("MataKuliah3PU");
EntityManager em = emf.createEntityManager();

if (returnValue == JFileChooser.APPROVE_OPTION) {
    File filePilihan = jfc.getSelectedFile();
    System.out.println("File yang dipilih: " + filePilihan.getAbsolutePath());

    try (BufferedReader br = new BufferedReader(new FileReader(filePilihan))) {
        String baris;
        String pemisah = ";";  // Pemisah antar kolom pada file CSV

        while ((baris = br.readLine()) != null) {
            String[] data = baris.split(pemisah);
            if (data.length == 5) {  // Mengharapkan 5 kolom: NIM, Nama, Asal SMA, Nama Orang Tua, dan Kolom lainnya
                String nim = data[0].trim();               // Data NIM
                String nama = data[1].trim();              // Data Nama
                String asalSma = data[2].trim();           // Data Asal SMA
                String namaOrtu = data[3].trim();          // Data Nama Orang Tua
                // Jika ada kolom tambahan, misalnya kolom lainnya:
                // String kolomLain = data[4].trim();  // Jika ada

                if (!nim.isEmpty() && !nama.isEmpty() && !asalSma.isEmpty() && !namaOrtu.isEmpty()) {
                    em.getTransaction().begin();

                    // Buat objek Mahasiswa (atau kelas lainnya yang sesuai dengan struktur tabel Anda)
                    Mahasiswa mahasiswa = new Mahasiswa();
                    mahasiswa.setNIM(nim);
                    mahasiswa.setNama(nama);
                    mahasiswa.setAsalSma(asalSma);
                    mahasiswa.setNamaOrtu(namaOrtu);

                    // Simpan objek ke dalam database
                    em.persist(mahasiswa);

                    em.getTransaction().commit();
                    JOptionPane.showMessageDialog(null, "Data Mahasiswa dengan NIM " + nim + " berhasil diinput.");
                    tampil();  // Update tampilan tabel jika ada perubahan data
                } else {
                    JOptionPane.showMessageDialog(null, "Data tidak lengkap untuk NIM " + nim);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Format data tidak valid pada baris: " + baris);
            }
        }
    } catch (FileNotFoundException ex) {
        Logger.getLogger(Mahasiswa.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(null, "File tidak ditemukan.");
    } catch (IOException ex) {
        Logger.getLogger(Mahasiswa.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(null, "Terjadi kesalahan saat membaca file.");
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(null, "Format angka tidak valid.");
    } finally {
        if (em.isOpen()) {
            em.close();  // Pastikan EntityManager ditutup
        }
        if (emf.isOpen()) {
            emf.close();  // Pastikan EntityManagerFactory ditutup
        }
    }
}
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        int row = jTable1.getSelectedRow();
        String nim = jTable1.getValueAt(row, 0).toString();
        String alamat = jTable1.getValueAt(row, 1).toString();
        String nama = jTable1.getValueAt(row, 2).toString();
        String asalSma = jTable1.getValueAt(row, 3).toString();
        String namaOrtu = jTable1.getValueAt(row, 4).toString();
    }//GEN-LAST:event_jTable1MouseClicked

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        bersih();

    }//GEN-LAST:event_btnClearActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NadifJframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NadifJframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NadifJframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NadifJframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NadifJframe().setVisible(true);
            }
        });
    }

    public void showTable() {
        // Membuat EntityManager untuk mengambil data dari database
        EntityManager entityManager = Persistence.createEntityManagerFactory("MataKuliah3PU").createEntityManager();

        // Query untuk mengambil semua data mahasiswa
        List<Mahasiswa> mahasiswaList = entityManager.createQuery("SELECT m FROM Mahasiswa m", Mahasiswa.class).getResultList();

        // Menampilkan data ke dalam JTable
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Menghapus baris lama dari tabel
        for (Mahasiswa mahasiswa : mahasiswaList) {
            model.addRow(new Object[]{
                mahasiswa.getNIM(),
                mahasiswa.getNama(),
                mahasiswa.getAlamat(),
                mahasiswa.getAsalSma(),
                mahasiswa.getNamaOrtu()
            });
        }
    }

    public void bersih() {
        tfNIM.setText("");
        tfAlamat.setText("");
        tfNama.setText("");
        tfAsal.setText("");
        tfNIM.setEditable(true);
    }

    DefaultTableModel tbmk;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCetak;
    private javax.swing.JButton btnClear;
    private java.awt.Button btnDelete;
    private java.awt.Button btnTambah;
    private java.awt.Button btnUpdate;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField tfAlamat;
    private javax.swing.JTextField tfAsal;
    private javax.swing.JTextField tfNIM;
    private javax.swing.JTextField tfNama;
    private javax.swing.JTextField tfNamaOrtu;
    // End of variables declaration//GEN-END:variables

    private void tampil() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
